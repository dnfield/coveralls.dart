{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coveralls for Dart Send LCOV and Clover coverage reports to the Coveralls service, in Dart . Quick start Append the following line to your project's pubspec.yaml file: dependencies : coveralls : * Install the latest version of Coveralls for Dart with Pub : pub get For detailed instructions, see the installation guide .","title":"Overview"},{"location":"#coveralls-for-dart","text":"Send LCOV and Clover coverage reports to the Coveralls service, in Dart .","title":"Coveralls for Dart"},{"location":"#quick-start","text":"Append the following line to your project's pubspec.yaml file: dependencies : coveralls : * Install the latest version of Coveralls for Dart with Pub : pub get For detailed instructions, see the installation guide .","title":"Quick start"},{"location":"features/","text":"Features Coverage formats Currently, this package supports two formats of coverage reports: LCOV : the de facto standard. Clover : a common format produced by Java and PHP test frameworks. CI services This project has been tested with Travis CI service, but these services should also work with no extra effort: AppVeyor CircleCI Codeship GitLab CI Jenkins Semaphore Solano CI Surf Wercker Environment variables If your build system is not supported, you can still use this package. There are a few environment variables that are necessary for supporting your build system: COVERALLS_SERVICE_NAME : the name of your build system. COVERALLS_REPO_TOKEN : the secret repository token from Coveralls . There are optional environment variables: COVERALLS_SERVICE_JOB_ID : a string that uniquely identifies the build job. COVERALLS_RUN_AT : a date string for the time that the job ran. This defaults to your build system's date/time if you don't set it. The full list of supported environment variables is available in the source code of the Configuration class (see the fromEnvironment() static method). The .coveralls.yml file This package supports the same configuration sources as the Coveralls ones: Coveralls currently supports","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#coverage-formats","text":"Currently, this package supports two formats of coverage reports: LCOV : the de facto standard. Clover : a common format produced by Java and PHP test frameworks.","title":"Coverage formats"},{"location":"features/#ci-services","text":"This project has been tested with Travis CI service, but these services should also work with no extra effort: AppVeyor CircleCI Codeship GitLab CI Jenkins Semaphore Solano CI Surf Wercker","title":"CI services"},{"location":"features/#environment-variables","text":"If your build system is not supported, you can still use this package. There are a few environment variables that are necessary for supporting your build system: COVERALLS_SERVICE_NAME : the name of your build system. COVERALLS_REPO_TOKEN : the secret repository token from Coveralls . There are optional environment variables: COVERALLS_SERVICE_JOB_ID : a string that uniquely identifies the build job. COVERALLS_RUN_AT : a date string for the time that the job ran. This defaults to your build system's date/time if you don't set it. The full list of supported environment variables is available in the source code of the Configuration class (see the fromEnvironment() static method).","title":"Environment variables"},{"location":"features/#the-coverallsyml-file","text":"This package supports the same configuration sources as the Coveralls ones: Coveralls currently supports","title":"The .coveralls.yml file"},{"location":"installation/","text":"Installation Requirements Before installing Coveralls for Dart , you need to make sure you have the Dart SDK and Pub , the Dart package manager, up and running. Warning Coveralls for Dart requires Dart = 2.1.0 . You can verify if you're already good to go with the following commands: dart --version # Dart VM version: 2.1.0 (Unknown timestamp) on linux_x64 pub --version # Pub 2.1.0 Info If you plan to play with the package sources, you will also need Grinder and Material for MkDocs . Installing with Pub package manager 1. Depend on it Add this to your project's pubspec.yaml file: dependencies : coveralls : * 2. Install it Install this package and its dependencies from a command prompt: pub get 3. Import it Now in your Dart code, you can use: import package:coveralls/coveralls.dart ;","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Before installing Coveralls for Dart , you need to make sure you have the Dart SDK and Pub , the Dart package manager, up and running. Warning Coveralls for Dart requires Dart = 2.1.0 . You can verify if you're already good to go with the following commands: dart --version # Dart VM version: 2.1.0 (Unknown timestamp) on linux_x64 pub --version # Pub 2.1.0 Info If you plan to play with the package sources, you will also need Grinder and Material for MkDocs .","title":"Requirements"},{"location":"installation/#installing-with-pub-package-manager","text":"","title":"Installing with Pub package manager"},{"location":"installation/#1-depend-on-it","text":"Add this to your project's pubspec.yaml file: dependencies : coveralls : *","title":"1. Depend on it"},{"location":"installation/#2-install-it","text":"Install this package and its dependencies from a command prompt: pub get","title":"2. Install it"},{"location":"installation/#3-import-it","text":"Now in your Dart code, you can use: import package:coveralls/coveralls.dart ;","title":"3. Import it"},{"location":"about/changelog/","text":"Changelog Version 5.1.0 Updated the package dependencies. Updated the URL of the Git repository. Version 5.0.0 Breaking change: raised the Dart SDK constraint. Updated the package dependencies. Version 4.3.0 Improved the handling of SSH-based Git remotes. Updated the package dependencies. Version 4.2.0 Updated the package dependencies. Version 4.1.0 Updated the package dependencies. Version 4.0.0 Breaking change: the Configuration.fromEnvironment() constructor is now an asynchronous static method. Using deferred loading for the services. Updated the package dependencies. Version 3.2.0 Added the Options class, used by the command line interface. Raised the Dart SDK constraint. Updated the package dependencies. Version 3.1.0 Added a user guide based on MkDocs . Added an example code. Raised the Dart SDK constraint. Updated the package dependencies. Version 3.0.0 Breaking change: starting to use and support the Dart 2 SDK . Using optional const and new . Updated the package dependencies. Version 2.1.0 Updated the package dependencies. Version 2.0.1 Fixed a bug: the CLI script doesn't run when using the pub global run command. Version 2.0.0 Breaking change: changed the signature of most class constructors. Breaking change: most class properties are now final . Breaking change: raised the required Dart version. Breaking change: replaced the -f|--file named argument of the CLI script by an anonymous argument (e.g. coveralls lcov.info instead of coveralls -f lcov.info ) Breaking change: the version property is now private. Added support for Clover reports. Changed licensing for the MIT License . Replaced the which module by where . Updated the package dependencies. Version 1.0.0 First stable release. Version 0.3.0 Updated the package dependencies. Version 0.2.0 Updated the package dependencies. Version 0.1.1 Updated the documentation. Version 0.1.0 Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-510","text":"Updated the package dependencies. Updated the URL of the Git repository.","title":"Version 5.1.0"},{"location":"about/changelog/#version-500","text":"Breaking change: raised the Dart SDK constraint. Updated the package dependencies.","title":"Version 5.0.0"},{"location":"about/changelog/#version-430","text":"Improved the handling of SSH-based Git remotes. Updated the package dependencies.","title":"Version 4.3.0"},{"location":"about/changelog/#version-420","text":"Updated the package dependencies.","title":"Version 4.2.0"},{"location":"about/changelog/#version-410","text":"Updated the package dependencies.","title":"Version 4.1.0"},{"location":"about/changelog/#version-400","text":"Breaking change: the Configuration.fromEnvironment() constructor is now an asynchronous static method. Using deferred loading for the services. Updated the package dependencies.","title":"Version 4.0.0"},{"location":"about/changelog/#version-320","text":"Added the Options class, used by the command line interface. Raised the Dart SDK constraint. Updated the package dependencies.","title":"Version 3.2.0"},{"location":"about/changelog/#version-310","text":"Added a user guide based on MkDocs . Added an example code. Raised the Dart SDK constraint. Updated the package dependencies.","title":"Version 3.1.0"},{"location":"about/changelog/#version-300","text":"Breaking change: starting to use and support the Dart 2 SDK . Using optional const and new . Updated the package dependencies.","title":"Version 3.0.0"},{"location":"about/changelog/#version-210","text":"Updated the package dependencies.","title":"Version 2.1.0"},{"location":"about/changelog/#version-201","text":"Fixed a bug: the CLI script doesn't run when using the pub global run command.","title":"Version 2.0.1"},{"location":"about/changelog/#version-200","text":"Breaking change: changed the signature of most class constructors. Breaking change: most class properties are now final . Breaking change: raised the required Dart version. Breaking change: replaced the -f|--file named argument of the CLI script by an anonymous argument (e.g. coveralls lcov.info instead of coveralls -f lcov.info ) Breaking change: the version property is now private. Added support for Clover reports. Changed licensing for the MIT License . Replaced the which module by where . Updated the package dependencies.","title":"Version 2.0.0"},{"location":"about/changelog/#version-100","text":"First stable release.","title":"Version 1.0.0"},{"location":"about/changelog/#version-030","text":"Updated the package dependencies.","title":"Version 0.3.0"},{"location":"about/changelog/#version-020","text":"Updated the package dependencies.","title":"Version 0.2.0"},{"location":"about/changelog/#version-011","text":"Updated the documentation.","title":"Version 0.1.1"},{"location":"about/changelog/#version-010","text":"Initial release.","title":"Version 0.1.0"},{"location":"about/license/","text":"MIT License Copyright 2017 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright 2017 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/see_also/","text":"See also Development API reference Pub package Submit an issue Testing Continuous integration Code coverage Other implementations JavaScript: Coveralls for JS PHP: Coveralls for PHP","title":"See also"},{"location":"about/see_also/#see-also","text":"","title":"See also"},{"location":"about/see_also/#development","text":"API reference Pub package Submit an issue","title":"Development"},{"location":"about/see_also/#testing","text":"Continuous integration Code coverage","title":"Testing"},{"location":"about/see_also/#other-implementations","text":"JavaScript: Coveralls for JS PHP: Coveralls for PHP","title":"Other implementations"},{"location":"api/static-assets/readme/","text":"highlight.js Generated from https://highlightjs.org/download/ on 2017-08-30 Included languages: bash css dart java javascript json markdown objectivec ruby - dragged in by yaml - \ud83d\ude44 shell swift xml - includes html yaml","title":"highlight.js"},{"location":"api/static-assets/readme/#highlightjs","text":"Generated from https://highlightjs.org/download/ on 2017-08-30 Included languages: bash css dart java javascript json markdown objectivec ruby - dragged in by yaml - \ud83d\ude44 shell swift xml - includes html yaml","title":"highlight.js"},{"location":"usage/api/","text":"Application programming interface The hard way. Use the Client class to upload your coverage reports: import dart:io ; import package:coveralls/coveralls.dart ; Future void main () async { try { var coverage = File ( /path/to/coverage.report ); await Client (). upload ( await coverage . readAsString ()); print ( The report was sent successfully. ); } on Exception catch ( err ) { print ( An error occurred: $ err ); } } The Client#upload() method returns a Future that completes when the coverage report has been uploaded. The future completes with a FormatException if the input report is invalid. It completes with a ClientException if any error occurred while uploading the report. Client events The Client class triggers some events during its life cycle: request : emitted every time a request is made to the remote service. response : emitted every time a response is received from the remote service. These events are exposed as Stream , you can listen to them using the on EventName properties: client . onRequest . listen ( ( request ) = print ( Client request: ${ request . url } ) ); client . onResponse . listen ( ( response ) = print ( Server response: ${ response . statusCode } ) );","title":"Programming interface"},{"location":"usage/api/#application-programming-interface","text":"The hard way. Use the Client class to upload your coverage reports: import dart:io ; import package:coveralls/coveralls.dart ; Future void main () async { try { var coverage = File ( /path/to/coverage.report ); await Client (). upload ( await coverage . readAsString ()); print ( The report was sent successfully. ); } on Exception catch ( err ) { print ( An error occurred: $ err ); } } The Client#upload() method returns a Future that completes when the coverage report has been uploaded. The future completes with a FormatException if the input report is invalid. It completes with a ClientException if any error occurred while uploading the report.","title":"Application programming interface"},{"location":"usage/api/#client-events","text":"The Client class triggers some events during its life cycle: request : emitted every time a request is made to the remote service. response : emitted every time a response is received from the remote service. These events are exposed as Stream , you can listen to them using the on EventName properties: client . onRequest . listen ( ( request ) = print ( Client request: ${ request . url } ) ); client . onResponse . listen ( ( response ) = print ( Server response: ${ response . statusCode } ) );","title":"Client events"},{"location":"usage/cli/","text":"Command line interface The easy way. From a command prompt, install the coveralls executable: pub global activate coveralls Tip Consider adding the pub global executables directory to your system path. Then use it to upload your coverage reports: $ coveralls --help Send a coverage report to the Coveralls service. Usage: coveralls [ options ] file Options: -h, --help Output usage information. -v, --version Output the version number. For example: coveralls build/lcov.info","title":"Command line interface"},{"location":"usage/cli/#command-line-interface","text":"The easy way. From a command prompt, install the coveralls executable: pub global activate coveralls Tip Consider adding the pub global executables directory to your system path. Then use it to upload your coverage reports: $ coveralls --help Send a coverage report to the Coveralls service. Usage: coveralls [ options ] file Options: -h, --help Output usage information. -v, --version Output the version number. For example: coveralls build/lcov.info","title":"Command line interface"}]}